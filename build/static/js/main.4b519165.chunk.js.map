{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","variant","CardContent","Typography","color","gutterBottom","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","console","log","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","FormControl","Input","placeholder","value","type","onChange","event","target","IconButton","disabled","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"gUA0BeA,G,MAnBEC,sBAAW,WAAsBC,GAAS,IAA7BC,EAA4B,EAA5BA,QACpBC,EADgD,EAAnBC,WACPF,EAAQE,SACpC,OACI,yBAAKH,IAAKA,EAAKI,UAAS,uBAAkBF,GAAU,kBAClD,kBAACG,EAAA,EAAD,CAAMD,UAAWF,EAAS,oBAAsB,qBAAsBI,QAAQ,YAClF,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaC,MAAM,gBAAgBC,cAAY,GAC9CR,EAAM,UAAOD,EAAQA,SAAf,UAA+BA,EAAQE,UAAY,cAAnD,gBAAwEF,EAAQA,iB,iBCC9EU,EAbGC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,+CACbC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGMC,Y,uCC4DVC,MA7Df,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAMmBJ,mBAAS,IAN5B,mBAMNrB,EANM,KAMI0B,EANJ,KAqCb,OA7BDC,QAAQC,IAAIN,GACZK,QAAQC,IAAIJ,GAEZK,qBAAU,WACTrB,EAAGsB,WAAW,mBACbC,QAAQ,YAAY,QACpBC,YAAW,SAAAC,GACVR,EAAYQ,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAI,CAACC,GAAID,EAAIC,GAAIC,KAAKF,EAAIE,iBAG3D,IAEHT,qBAAU,WACRH,EAAYa,OAAO,6BAElB,IAeA,yBAAKtC,UAAU,OACd,yBAAKuC,IAAI,oIACR,yCACA,qCAAWxC,GACX,0BAAMC,UAAW,aACjB,kBAACwC,EAAA,EAAD,CAAaxC,UAAU,oBAE3B,kBAACyC,EAAA,EAAD,CAAOzC,UAAW,YAAY0C,YAAY,0BAAgBC,MAAOtB,EAAOuB,KAAK,SAAUC,SAAU,SAAAC,GAAK,OAAIxB,EAASwB,EAAMC,OAAOJ,UAChI,kBAACK,EAAA,EAAD,CAAYhD,UAAU,iBAAiBE,QAAQ,YAAYG,MAAM,UAAW4C,UAAW5B,EAAQuB,KAAK,SAASM,QAtB1F,SAACJ,GAClBA,EAAMK,iBAEN5C,EAAGsB,WAAW,mBAAmBuB,IAAI,CACnCvD,QAASwB,EACTtB,SAAUA,EACVsD,UAAW7C,IAASU,UAAUoC,WAAWC,oBAI3CjC,EAAS,MAab,kBAAC,IAAD,SAIK,kBAAC,IAAD,KACCC,EAASW,KAAI,gBAAEE,EAAF,EAAEA,GAAIC,EAAN,EAAMA,KAAN,OACb,kBAAC,EAAD,CAASmB,IAAKpB,EAAIrC,SAAUA,EAAUF,QAASwC,UCrDjCoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAM7E,c","file":"static/js/main.4b519165.chunk.js","sourcesContent":["import React, {forwardRef} from 'react'\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport './Message.css';\r\n\r\n\r\n const Message = forwardRef(({message, username}, ref) => {\r\n    const isUser = username === message.username\r\n    return (\r\n        <div ref={ref} className={`message_card ${isUser && 'message__user'}`}>\r\n          <Card className={isUser ? \"message__userCard\" : \"message__guestCard\"} variant=\"outlined\">\r\n      <CardContent>\r\n        <Typography  color=\"textSecondary\" gutterBottom>\r\n        {isUser ?  `${message.message }` : `${message.username || 'Unknow User'} say:${message.message}`}\r\n        </Typography>\r\n\r\n      </CardContent>\r\n     \r\n    </Card>\r\n     \r\n       \r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Message\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyD-5K6DtUu_v7e9_1djjPcJemDBof3GPXA\",\r\n    authDomain: \"messenger-clone-1106b.firebaseapp.com\",\r\n    databaseURL: \"https://messenger-clone-1106b.firebaseio.com\",\r\n    projectId: \"messenger-clone-1106b\",\r\n    storageBucket: \"messenger-clone-1106b.appspot.com\",\r\n    messagingSenderId: \"412048353201\",\r\n    appId: \"1:412048353201:web:268f8e2d284e21b4c63f90\",\r\n    measurementId: \"G-LLRV71CE90\"\r\n  });\r\n\r\n  const db = firebaseApp.firestore();\r\n\r\n  export default db;","import React, { useState , useEffect} from 'react';\nimport { Button } from '@material-ui/core';\nimport { FormControl, InputLabel, Input} from '@material-ui/core';\nimport Message from './Message'; \nimport db from './firebase'\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\nimport { IconButton } from '@material-ui/core';\n\nimport './App.css';\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([\n   \n    \n  ])\n  const [username, setUsername] = useState('')\n   \n console.log(input);\n console.log(messages);\n\n useEffect(() => {\n  db.collection(\"messenger-clone\")\n  .orderBy('timestamp','desc')  \n  .onSnapshot(snapshot => {\n    setMessages(snapshot.docs.map(doc =>({id: doc.id, data:doc.data()})))\n  });\n   \n }, [])\n \n useEffect(() => {\n   setUsername(prompt('Please enter your name'))\n   \n }, [])\n const sendMessage = (event) => { \n    event.preventDefault();\n\n    db.collection(\"messenger-clone\").add({\n      message: input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n \n    })\n     \n    setInput('');\n }\n\n  return (\n    <div className=\"App\">\n     <img src='https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Facebook_Messenger_4_Logo.svg/768px-Facebook_Messenger_4_Logo.svg.png'/>\n      <h1>Messenger</h1>\n      <h2>Hello {username}</h2>\n      <form className= 'app__form'>\n      <FormControl className=\"app__formControl\">\n  \n  <Input className= \"app_input\" placeholder=\"nhập tin nhắn\" value={input} type='subnit'  onChange={event => setInput(event.target.value)} />\n  <IconButton className=\"app_iconButton\" variant=\"contained\" color=\"primary\"  disabled={!input}  type=\"submit\" onClick={sendMessage}>\n<SendIcon/>\n  </IconButton>\n</FormControl>\n</form>\n     <FlipMove>\n     {messages.map(({id, data}) => (\n      <Message key={id} username={username} message={data} />\n     ))}\n     </FlipMove>\n    </div>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}